Currying

  Look again at the summation example:

    def sumInts(a: Int, b: Int) = sum(x => x, a, b)
    def sumCubes(a: Int, b: Int) = sum(x => x * x * x, a, b)

    - a and b get passed unchanged into sum
    - Is there a way to get rid of passing these parameters from sumInts to sum?

Functions returning Functions

  Rewrite sum as follows:

    def sum(f: Int => Int): (Int, Int) => Int = {
      def sumF(a: Int, b: Int): Int = 
        if (a > b) 0
        else f(a) + sumF(a + 1, b)
      sumF
    }

    sum is now a function that returns another function
    - the returned function sumF applies the given function parameter f and sums the results

  We can now build up our functions in pieces

    def sumInts = sum(x => x)
    def sumCubes = sum(x => x * x * x)

    We then apply our functions as usual:

     sumInts(1, 10) + sumCubes(10, 20)

  We can also get rid of the middlemen:

    sum (cube) (1, 10)

      - this applies sum to cube, and then applies the result to 1, 10
      - Generally, function application associates to the left

  "The definition of functions that return functions is so useful in functional programming that there is a special syntax for it in Scala."

Multiple Parameter Lists

   The following defintion of sum is equivalent to the one above with the nest sumF

    def sum(f: Int => Int)(a: Int, b: Int): Int = 
      if (a > b) 0 else f(a) + sum(f)(a + 1, b)

    In general, a definition of a function with multiple parameter lists
 
      def f(args1)...(argsn) = E

    is equivalent to 
 
      def f(args1)...(argsn-1) = (argsn => E)

    this process can then be repeated n times until we end up with

      def f = (args1 => (args2 => ... (argsn => E) ... ))

    "This style of definition and function application is called currying, named for its instigator, Haskel Brooks Curry..."

      - essentially, taking multiple parameter lists and expanded the application out into anonymous functions which each take a single parameter

More Function Types

  Given: def sum(f: Int => Int)(a: Int, b: Int): Int = ...

  What is the type of sum?

  (Int => Int) => (Int, Int) => Int
    - functional types associate to the right
      Int => Int => Int is equivalent to Int => (Int => Int)

  Exercise:
    1. Write a product function that calculates the product of the values of a function for the points on a given interval
    2. Write factorial in terms of product
    3. Can you write a more general function, which generalizes both sum and product
